// Code generated by ent, DO NOT EDIT.

package orm

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"frec.kr/tdoo/pkg/v1/gen/tdoo/orm/checklist"
	"frec.kr/tdoo/pkg/v1/gen/tdoo/orm/task"
	"github.com/google/uuid"
)

// Checklist is the model entity for the Checklist schema.
type Checklist struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Finished holds the value of the "finished" field.
	Finished bool `json:"finished,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChecklistQuery when eager-loading is set.
	Edges          ChecklistEdges `json:"edges"`
	checklist_task *uuid.UUID
	selectValues   sql.SelectValues
}

// ChecklistEdges holds the relations/edges for other nodes in the graph.
type ChecklistEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChecklistEdges) TaskOrErr() (*Task, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Checklist) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case checklist.FieldFinished:
			values[i] = new(sql.NullBool)
		case checklist.FieldTitle:
			values[i] = new(sql.NullString)
		case checklist.FieldID:
			values[i] = new(uuid.UUID)
		case checklist.ForeignKeys[0]: // checklist_task
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Checklist fields.
func (c *Checklist) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checklist.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case checklist.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case checklist.FieldFinished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field finished", values[i])
			} else if value.Valid {
				c.Finished = value.Bool
			}
		case checklist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field checklist_task", values[i])
			} else if value.Valid {
				c.checklist_task = new(uuid.UUID)
				*c.checklist_task = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Checklist.
// This includes values selected through modifiers, order, etc.
func (c *Checklist) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the Checklist entity.
func (c *Checklist) QueryTask() *TaskQuery {
	return NewChecklistClient(c.config).QueryTask(c)
}

// Update returns a builder for updating this Checklist.
// Note that you need to call Checklist.Unwrap() before calling this method if this Checklist
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Checklist) Update() *ChecklistUpdateOne {
	return NewChecklistClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Checklist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Checklist) Unwrap() *Checklist {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("orm: Checklist is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Checklist) String() string {
	var builder strings.Builder
	builder.WriteString("Checklist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("finished=")
	builder.WriteString(fmt.Sprintf("%v", c.Finished))
	builder.WriteByte(')')
	return builder.String()
}

// Checklists is a parsable slice of Checklist.
type Checklists []*Checklist
