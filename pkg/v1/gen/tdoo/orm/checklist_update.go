// Code generated by ent, DO NOT EDIT.

package orm

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"frec.kr/tdoo/pkg/v1/gen/tdoo/orm/checklist"
	"frec.kr/tdoo/pkg/v1/gen/tdoo/orm/predicate"
	"frec.kr/tdoo/pkg/v1/gen/tdoo/orm/task"
	"github.com/google/uuid"
)

// ChecklistUpdate is the builder for updating Checklist entities.
type ChecklistUpdate struct {
	config
	hooks    []Hook
	mutation *ChecklistMutation
}

// Where appends a list predicates to the ChecklistUpdate builder.
func (cu *ChecklistUpdate) Where(ps ...predicate.Checklist) *ChecklistUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ChecklistUpdate) SetTitle(s string) *ChecklistUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ChecklistUpdate) SetNillableTitle(s *string) *ChecklistUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetFinished sets the "finished" field.
func (cu *ChecklistUpdate) SetFinished(b bool) *ChecklistUpdate {
	cu.mutation.SetFinished(b)
	return cu
}

// SetNillableFinished sets the "finished" field if the given value is not nil.
func (cu *ChecklistUpdate) SetNillableFinished(b *bool) *ChecklistUpdate {
	if b != nil {
		cu.SetFinished(*b)
	}
	return cu
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (cu *ChecklistUpdate) SetTaskID(id uuid.UUID) *ChecklistUpdate {
	cu.mutation.SetTaskID(id)
	return cu
}

// SetTask sets the "task" edge to the Task entity.
func (cu *ChecklistUpdate) SetTask(t *Task) *ChecklistUpdate {
	return cu.SetTaskID(t.ID)
}

// Mutation returns the ChecklistMutation object of the builder.
func (cu *ChecklistUpdate) Mutation() *ChecklistMutation {
	return cu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (cu *ChecklistUpdate) ClearTask() *ChecklistUpdate {
	cu.mutation.ClearTask()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChecklistUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChecklistUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChecklistUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChecklistUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChecklistUpdate) check() error {
	if cu.mutation.TaskCleared() && len(cu.mutation.TaskIDs()) > 0 {
		return errors.New(`orm: clearing a required unique edge "Checklist.task"`)
	}
	return nil
}

func (cu *ChecklistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(checklist.Table, checklist.Columns, sqlgraph.NewFieldSpec(checklist.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(checklist.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Finished(); ok {
		_spec.SetField(checklist.FieldFinished, field.TypeBool, value)
	}
	if cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checklist.TaskTable,
			Columns: []string{checklist.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checklist.TaskTable,
			Columns: []string{checklist.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChecklistUpdateOne is the builder for updating a single Checklist entity.
type ChecklistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChecklistMutation
}

// SetTitle sets the "title" field.
func (cuo *ChecklistUpdateOne) SetTitle(s string) *ChecklistUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ChecklistUpdateOne) SetNillableTitle(s *string) *ChecklistUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetFinished sets the "finished" field.
func (cuo *ChecklistUpdateOne) SetFinished(b bool) *ChecklistUpdateOne {
	cuo.mutation.SetFinished(b)
	return cuo
}

// SetNillableFinished sets the "finished" field if the given value is not nil.
func (cuo *ChecklistUpdateOne) SetNillableFinished(b *bool) *ChecklistUpdateOne {
	if b != nil {
		cuo.SetFinished(*b)
	}
	return cuo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (cuo *ChecklistUpdateOne) SetTaskID(id uuid.UUID) *ChecklistUpdateOne {
	cuo.mutation.SetTaskID(id)
	return cuo
}

// SetTask sets the "task" edge to the Task entity.
func (cuo *ChecklistUpdateOne) SetTask(t *Task) *ChecklistUpdateOne {
	return cuo.SetTaskID(t.ID)
}

// Mutation returns the ChecklistMutation object of the builder.
func (cuo *ChecklistUpdateOne) Mutation() *ChecklistMutation {
	return cuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (cuo *ChecklistUpdateOne) ClearTask() *ChecklistUpdateOne {
	cuo.mutation.ClearTask()
	return cuo
}

// Where appends a list predicates to the ChecklistUpdate builder.
func (cuo *ChecklistUpdateOne) Where(ps ...predicate.Checklist) *ChecklistUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChecklistUpdateOne) Select(field string, fields ...string) *ChecklistUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Checklist entity.
func (cuo *ChecklistUpdateOne) Save(ctx context.Context) (*Checklist, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChecklistUpdateOne) SaveX(ctx context.Context) *Checklist {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChecklistUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChecklistUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChecklistUpdateOne) check() error {
	if cuo.mutation.TaskCleared() && len(cuo.mutation.TaskIDs()) > 0 {
		return errors.New(`orm: clearing a required unique edge "Checklist.task"`)
	}
	return nil
}

func (cuo *ChecklistUpdateOne) sqlSave(ctx context.Context) (_node *Checklist, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(checklist.Table, checklist.Columns, sqlgraph.NewFieldSpec(checklist.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`orm: missing "Checklist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checklist.FieldID)
		for _, f := range fields {
			if !checklist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("orm: invalid field %q for query", f)}
			}
			if f != checklist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(checklist.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Finished(); ok {
		_spec.SetField(checklist.FieldFinished, field.TypeBool, value)
	}
	if cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checklist.TaskTable,
			Columns: []string{checklist.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   checklist.TaskTable,
			Columns: []string{checklist.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Checklist{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
