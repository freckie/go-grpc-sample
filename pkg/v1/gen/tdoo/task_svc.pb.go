// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: tdoo/task_svc.proto

package tdoo

import (
	common "frec.kr/tdoo/pkg/v1/gen/tdoo/common"
	_ "github.com/lesomnus/proto-orm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskRequestOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=read_mask,json=readMask,proto3,oneof" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRequestOptions) Reset() {
	*x = TaskRequestOptions{}
	mi := &file_tdoo_task_svc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequestOptions) ProtoMessage() {}

func (x *TaskRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequestOptions.ProtoReflect.Descriptor instead.
func (*TaskRequestOptions) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{0}
}

func (x *TaskRequestOptions) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type TaskGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to By:
	//
	//	*TaskGetRequest_Id
	By            isTaskGetRequest_By `protobuf_oneof:"by"`
	Params        *TaskRequestOptions `protobuf:"bytes,15,opt,name=params,proto3,oneof" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskGetRequest) Reset() {
	*x = TaskGetRequest{}
	mi := &file_tdoo_task_svc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGetRequest) ProtoMessage() {}

func (x *TaskGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGetRequest.ProtoReflect.Descriptor instead.
func (*TaskGetRequest) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{1}
}

func (x *TaskGetRequest) GetBy() isTaskGetRequest_By {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *TaskGetRequest) GetId() []byte {
	if x != nil {
		if x, ok := x.By.(*TaskGetRequest_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *TaskGetRequest) GetParams() *TaskRequestOptions {
	if x != nil {
		return x.Params
	}
	return nil
}

type isTaskGetRequest_By interface {
	isTaskGetRequest_By()
}

type TaskGetRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

func (*TaskGetRequest_Id) isTaskGetRequest_By() {}

type TaskListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       []*TaskFilter          `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Orders        []*TaskOrder           `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
	Params        *TaskRequestOptions    `protobuf:"bytes,3,opt,name=params,proto3,oneof" json:"params,omitempty"`
	PageToken     *string                `protobuf:"bytes,15,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskListRequest) Reset() {
	*x = TaskListRequest{}
	mi := &file_tdoo_task_svc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest) ProtoMessage() {}

func (x *TaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest.ProtoReflect.Descriptor instead.
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{2}
}

func (x *TaskListRequest) GetFilters() []*TaskFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *TaskListRequest) GetOrders() []*TaskOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *TaskListRequest) GetParams() *TaskRequestOptions {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TaskListRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type TaskOrder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to By:
	//
	//	*TaskOrder_Status
	//	*TaskOrder_DueDate
	//	*TaskOrder_DateCreated
	//	*TaskOrder_DateUpdated
	By            isTaskOrder_By `protobuf_oneof:"by"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskOrder) Reset() {
	*x = TaskOrder{}
	mi := &file_tdoo_task_svc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOrder) ProtoMessage() {}

func (x *TaskOrder) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOrder.ProtoReflect.Descriptor instead.
func (*TaskOrder) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{3}
}

func (x *TaskOrder) GetBy() isTaskOrder_By {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *TaskOrder) GetStatus() *common.OrderOption {
	if x != nil {
		if x, ok := x.By.(*TaskOrder_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *TaskOrder) GetDueDate() *common.OrderOption {
	if x != nil {
		if x, ok := x.By.(*TaskOrder_DueDate); ok {
			return x.DueDate
		}
	}
	return nil
}

func (x *TaskOrder) GetDateCreated() *common.OrderOption {
	if x != nil {
		if x, ok := x.By.(*TaskOrder_DateCreated); ok {
			return x.DateCreated
		}
	}
	return nil
}

func (x *TaskOrder) GetDateUpdated() *common.OrderOption {
	if x != nil {
		if x, ok := x.By.(*TaskOrder_DateUpdated); ok {
			return x.DateUpdated
		}
	}
	return nil
}

type isTaskOrder_By interface {
	isTaskOrder_By()
}

type TaskOrder_Status struct {
	Status *common.OrderOption `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

type TaskOrder_DueDate struct {
	DueDate *common.OrderOption `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3,oneof"`
}

type TaskOrder_DateCreated struct {
	DateCreated *common.OrderOption `protobuf:"bytes,14,opt,name=date_created,json=dateCreated,proto3,oneof"`
}

type TaskOrder_DateUpdated struct {
	DateUpdated *common.OrderOption `protobuf:"bytes,15,opt,name=date_updated,json=dateUpdated,proto3,oneof"`
}

func (*TaskOrder_Status) isTaskOrder_By() {}

func (*TaskOrder_DueDate) isTaskOrder_By() {}

func (*TaskOrder_DateCreated) isTaskOrder_By() {}

func (*TaskOrder_DateUpdated) isTaskOrder_By() {}

type TaskFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to By:
	//
	//	*TaskFilter_Status
	//	*TaskFilter_DueDate
	//	*TaskFilter_User
	//	*TaskFilter_DateCreated
	//	*TaskFilter_DateUpdated
	By            isTaskFilter_By `protobuf_oneof:"by"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskFilter) Reset() {
	*x = TaskFilter{}
	mi := &file_tdoo_task_svc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFilter) ProtoMessage() {}

func (x *TaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFilter.ProtoReflect.Descriptor instead.
func (*TaskFilter) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{4}
}

func (x *TaskFilter) GetBy() isTaskFilter_By {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *TaskFilter) GetStatus() TaskStatus {
	if x != nil {
		if x, ok := x.By.(*TaskFilter_Status); ok {
			return x.Status
		}
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *TaskFilter) GetDueDate() *common.TimeRange {
	if x != nil {
		if x, ok := x.By.(*TaskFilter_DueDate); ok {
			return x.DueDate
		}
	}
	return nil
}

func (x *TaskFilter) GetUser() *UserGetRequest {
	if x != nil {
		if x, ok := x.By.(*TaskFilter_User); ok {
			return x.User
		}
	}
	return nil
}

func (x *TaskFilter) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.By.(*TaskFilter_DateCreated); ok {
			return x.DateCreated
		}
	}
	return nil
}

func (x *TaskFilter) GetDateUpdated() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.By.(*TaskFilter_DateUpdated); ok {
			return x.DateUpdated
		}
	}
	return nil
}

type isTaskFilter_By interface {
	isTaskFilter_By()
}

type TaskFilter_Status struct {
	Status TaskStatus `protobuf:"varint,4,opt,name=status,proto3,enum=tdoo.TaskStatus,oneof"`
}

type TaskFilter_DueDate struct {
	DueDate *common.TimeRange `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3,oneof"`
}

type TaskFilter_User struct {
	User *UserGetRequest `protobuf:"bytes,6,opt,name=user,proto3,oneof"`
}

type TaskFilter_DateCreated struct {
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=date_created,json=dateCreated,proto3,oneof"`
}

type TaskFilter_DateUpdated struct {
	DateUpdated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=date_updated,json=dateUpdated,proto3,oneof"`
}

func (*TaskFilter_Status) isTaskFilter_By() {}

func (*TaskFilter_DueDate) isTaskFilter_By() {}

func (*TaskFilter_User) isTaskFilter_By() {}

func (*TaskFilter_DateCreated) isTaskFilter_By() {}

func (*TaskFilter_DateUpdated) isTaskFilter_By() {}

type TaskListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	NextPageToken string                 `protobuf:"bytes,15,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskListResponse) Reset() {
	*x = TaskListResponse{}
	mi := &file_tdoo_task_svc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResponse) ProtoMessage() {}

func (x *TaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResponse.ProtoReflect.Descriptor instead.
func (*TaskListResponse) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{5}
}

func (x *TaskListResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type TaskCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Status        *TaskStatus            `protobuf:"varint,4,opt,name=status,proto3,enum=tdoo.TaskStatus,oneof" json:"status,omitempty"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCreateRequest) Reset() {
	*x = TaskCreateRequest{}
	mi := &file_tdoo_task_svc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateRequest) ProtoMessage() {}

func (x *TaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{6}
}

func (x *TaskCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskCreateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TaskCreateRequest) GetStatus() TaskStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *TaskCreateRequest) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

type TaskUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskUpdateRequest) Reset() {
	*x = TaskUpdateRequest{}
	mi := &file_tdoo_task_svc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateRequest) ProtoMessage() {}

func (x *TaskUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{7}
}

func (x *TaskUpdateRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskUpdateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type TaskDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskDeleteRequest) Reset() {
	*x = TaskDeleteRequest{}
	mi := &file_tdoo_task_svc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteRequest) ProtoMessage() {}

func (x *TaskDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteRequest.ProtoReflect.Descriptor instead.
func (*TaskDeleteRequest) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{8}
}

func (x *TaskDeleteRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type TaskShiftRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Next          TaskStatus             `protobuf:"varint,2,opt,name=next,proto3,enum=tdoo.TaskStatus" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskShiftRequest) Reset() {
	*x = TaskShiftRequest{}
	mi := &file_tdoo_task_svc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskShiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskShiftRequest) ProtoMessage() {}

func (x *TaskShiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdoo_task_svc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskShiftRequest.ProtoReflect.Descriptor instead.
func (*TaskShiftRequest) Descriptor() ([]byte, []int) {
	return file_tdoo_task_svc_proto_rawDescGZIP(), []int{9}
}

func (x *TaskShiftRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskShiftRequest) GetNext() TaskStatus {
	if x != nil {
		return x.Next
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

var File_tdoo_task_svc_proto protoreflect.FileDescriptor

var file_tdoo_task_svc_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x74, 0x64, 0x6f, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x64, 0x6f, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x6f,
	0x72, 0x6d, 0x2f, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x64,
	0x6f, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x74, 0x64, 0x6f, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x6a, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x64, 0x6f, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x0e, 0x22, 0x9c, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22, 0x5c, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x64, 0x6f, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x70, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x64,
	0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x23, 0x0a, 0x11, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x48, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x32, 0xbf, 0x02, 0x0a, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x14, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x64, 0x6f,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x74,
	0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x74, 0x64,
	0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x74, 0x64, 0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x64,
	0x6f, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x1e, 0x5a, 0x1c, 0x66,
	0x72, 0x65, 0x63, 0x2e, 0x6b, 0x72, 0x2f, 0x74, 0x64, 0x6f, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x64, 0x6f, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_tdoo_task_svc_proto_rawDescOnce sync.Once
	file_tdoo_task_svc_proto_rawDescData []byte
)

func file_tdoo_task_svc_proto_rawDescGZIP() []byte {
	file_tdoo_task_svc_proto_rawDescOnce.Do(func() {
		file_tdoo_task_svc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tdoo_task_svc_proto_rawDesc), len(file_tdoo_task_svc_proto_rawDesc)))
	})
	return file_tdoo_task_svc_proto_rawDescData
}

var file_tdoo_task_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tdoo_task_svc_proto_goTypes = []any{
	(*TaskRequestOptions)(nil),    // 0: tdoo.TaskRequestOptions
	(*TaskGetRequest)(nil),        // 1: tdoo.TaskGetRequest
	(*TaskListRequest)(nil),       // 2: tdoo.TaskListRequest
	(*TaskOrder)(nil),             // 3: tdoo.TaskOrder
	(*TaskFilter)(nil),            // 4: tdoo.TaskFilter
	(*TaskListResponse)(nil),      // 5: tdoo.TaskListResponse
	(*TaskCreateRequest)(nil),     // 6: tdoo.TaskCreateRequest
	(*TaskUpdateRequest)(nil),     // 7: tdoo.TaskUpdateRequest
	(*TaskDeleteRequest)(nil),     // 8: tdoo.TaskDeleteRequest
	(*TaskShiftRequest)(nil),      // 9: tdoo.TaskShiftRequest
	(*fieldmaskpb.FieldMask)(nil), // 10: google.protobuf.FieldMask
	(*common.OrderOption)(nil),    // 11: common.OrderOption
	(TaskStatus)(0),               // 12: tdoo.TaskStatus
	(*common.TimeRange)(nil),      // 13: common.TimeRange
	(*UserGetRequest)(nil),        // 14: tdoo.UserGetRequest
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*Task)(nil),                  // 16: tdoo.Task
	(*emptypb.Empty)(nil),         // 17: google.protobuf.Empty
}
var file_tdoo_task_svc_proto_depIdxs = []int32{
	10, // 0: tdoo.TaskRequestOptions.read_mask:type_name -> google.protobuf.FieldMask
	0,  // 1: tdoo.TaskGetRequest.params:type_name -> tdoo.TaskRequestOptions
	4,  // 2: tdoo.TaskListRequest.filters:type_name -> tdoo.TaskFilter
	3,  // 3: tdoo.TaskListRequest.orders:type_name -> tdoo.TaskOrder
	0,  // 4: tdoo.TaskListRequest.params:type_name -> tdoo.TaskRequestOptions
	11, // 5: tdoo.TaskOrder.status:type_name -> common.OrderOption
	11, // 6: tdoo.TaskOrder.due_date:type_name -> common.OrderOption
	11, // 7: tdoo.TaskOrder.date_created:type_name -> common.OrderOption
	11, // 8: tdoo.TaskOrder.date_updated:type_name -> common.OrderOption
	12, // 9: tdoo.TaskFilter.status:type_name -> tdoo.TaskStatus
	13, // 10: tdoo.TaskFilter.due_date:type_name -> common.TimeRange
	14, // 11: tdoo.TaskFilter.user:type_name -> tdoo.UserGetRequest
	15, // 12: tdoo.TaskFilter.date_created:type_name -> google.protobuf.Timestamp
	15, // 13: tdoo.TaskFilter.date_updated:type_name -> google.protobuf.Timestamp
	16, // 14: tdoo.TaskListResponse.tasks:type_name -> tdoo.Task
	12, // 15: tdoo.TaskCreateRequest.status:type_name -> tdoo.TaskStatus
	15, // 16: tdoo.TaskCreateRequest.due_date:type_name -> google.protobuf.Timestamp
	16, // 17: tdoo.TaskUpdateRequest.task:type_name -> tdoo.Task
	10, // 18: tdoo.TaskUpdateRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 19: tdoo.TaskShiftRequest.next:type_name -> tdoo.TaskStatus
	1,  // 20: tdoo.TaskService.Get:input_type -> tdoo.TaskGetRequest
	2,  // 21: tdoo.TaskService.List:input_type -> tdoo.TaskListRequest
	6,  // 22: tdoo.TaskService.Create:input_type -> tdoo.TaskCreateRequest
	7,  // 23: tdoo.TaskService.Update:input_type -> tdoo.TaskUpdateRequest
	8,  // 24: tdoo.TaskService.Delete:input_type -> tdoo.TaskDeleteRequest
	9,  // 25: tdoo.TaskService.Shift:input_type -> tdoo.TaskShiftRequest
	16, // 26: tdoo.TaskService.Get:output_type -> tdoo.Task
	5,  // 27: tdoo.TaskService.List:output_type -> tdoo.TaskListResponse
	16, // 28: tdoo.TaskService.Create:output_type -> tdoo.Task
	16, // 29: tdoo.TaskService.Update:output_type -> tdoo.Task
	17, // 30: tdoo.TaskService.Delete:output_type -> google.protobuf.Empty
	17, // 31: tdoo.TaskService.Shift:output_type -> google.protobuf.Empty
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_tdoo_task_svc_proto_init() }
func file_tdoo_task_svc_proto_init() {
	if File_tdoo_task_svc_proto != nil {
		return
	}
	file_tdoo_task_ent_proto_init()
	file_tdoo_user_svc_proto_init()
	file_tdoo_task_svc_proto_msgTypes[0].OneofWrappers = []any{}
	file_tdoo_task_svc_proto_msgTypes[1].OneofWrappers = []any{
		(*TaskGetRequest_Id)(nil),
	}
	file_tdoo_task_svc_proto_msgTypes[2].OneofWrappers = []any{}
	file_tdoo_task_svc_proto_msgTypes[3].OneofWrappers = []any{
		(*TaskOrder_Status)(nil),
		(*TaskOrder_DueDate)(nil),
		(*TaskOrder_DateCreated)(nil),
		(*TaskOrder_DateUpdated)(nil),
	}
	file_tdoo_task_svc_proto_msgTypes[4].OneofWrappers = []any{
		(*TaskFilter_Status)(nil),
		(*TaskFilter_DueDate)(nil),
		(*TaskFilter_User)(nil),
		(*TaskFilter_DateCreated)(nil),
		(*TaskFilter_DateUpdated)(nil),
	}
	file_tdoo_task_svc_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tdoo_task_svc_proto_rawDesc), len(file_tdoo_task_svc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tdoo_task_svc_proto_goTypes,
		DependencyIndexes: file_tdoo_task_svc_proto_depIdxs,
		MessageInfos:      file_tdoo_task_svc_proto_msgTypes,
	}.Build()
	File_tdoo_task_svc_proto = out.File
	file_tdoo_task_svc_proto_goTypes = nil
	file_tdoo_task_svc_proto_depIdxs = nil
}
